# Querying, cleaning, and mapping GBIF data

### In this lesson, you will learn

-   What species occurrence data is
-   How to obtain publicly-available occurrence data from GBIF
-   How to plot occurrence data with ggplot
-   How to clean occurrence data

### What is species occurrence data?

Occurrence data is a record of where a species was at a given time.

### How can we get occurrence data?

We can use the [Global Biodiversity Information Facility](https://www.gbif.org/). Data on GBIF is sourced from a wide variety of places: from users on iNaturalist equipped with a smartphone to museum specimens. You will read more about the accuracy of citizen science collected occurrence data on February 14.

First we need to load the necessary packages. We will use the tidyverse for data cleaning and visualization. We will use a package called spocc, which stands for "interface to SPecies OCCurence data sources."

```{r}
#Install packages and load libraries:

install.packages("spocc", repos = "http://cran.us.r-project.org")
install.packages("tidyverse", repos = "http://cran.us.r-project.org") #includes ggplot
library(spocc)
library(tidyverse)

```

Remember to use lots of comments on your own copy of this code, to help yourself remember later on!

We can directly query occurrence data in R with the "occ" function, which is part of the spocc package.Take a look at the [documentation](https://www.rdocumentation.org/packages/spocc/versions/0.1.0/topics/occ). In groups: write a query for *Rana draytonii* from GBIF, from any country during any time period. Limit it to 5000 occurrences.

```{r}
myQuery <-occ(query="Rana draytonii", from="gbif", limit=5000)
myQuery

```

Great! Now we have our query. We need to access the actual data from GBIF. We will use the "\$" to navigate the layers of this data.

```{r}
rana <- myQuery$gbif$data$Rana_draytonii
View(rana)
```

Let's initially plot this data on a map. It can be especially useful with species occurrence data to look at the distribution on a world map to find any outliers. We will use the map data in ggplot2 to add country lines as well.

```{r}

wrld<-ggplot2::map_data("world") # obtaining world borders

ggplot()+
  geom_polygon(data=wrld, mapping=aes(x=long, y=lat, group=group), fill="grey75", colour="grey60")+
  geom_point(data=rana, mapping=aes(x=longitude, y=latitude), show.legend=FALSE)+
  labs(title="Species occurrences of R. draytonii", x="longitude", y="latitude")

```

Now we want to clean our data. What do we need to do based on the reading for today? We need to: remove outliers (outside of normal sp range), remove duplicates, and deal with NA values. Looking at the map, we can see there are a few points in Africa. This is likely due to a recording error of the location, as they are near (0,0). We can also remove them on the basis of pre-existing knowledge that these frogs are only found in the southwestern United States. We are going to use the pipe %\>% to string together a series of commands.

```{r}
cleanRana <- rana %>% 
  filter(longitude < 0) %>%  # this is one way of removing the pts in Africa
  filter(latitude != "NA", longitude != "NA") %>%  # remove places where lat or long are NA
  mutate(location = paste(latitude, longitude, dateIdentified, sep = "/")) %>% # remove duplicates: create a new column that states the location and time
  distinct(location, .keep_all = TRUE) # remove duplicates: keep only one per duplicated entry

```

Our data, cleanRana, has over 140 columns! That is a lot of information that we do not need. We are going to pick out only the columns we need.

```{r}
cleanRanaSubset <- cleanRana %>% 
  select(longitude, latitude, eventDate)
```

Lastly, we are going to write our clean data to a csv file so we can use it in later lessons.

```{r}
write.csv(cleanRanaSubset, "ranaData.csv")

```

Great job!
