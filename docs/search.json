[
  {
    "objectID": "Assignments/assignments.html",
    "href": "Assignments/assignments.html",
    "title": "",
    "section": "",
    "text": "Assignments\nhow to submit, etc"
  },
  {
    "objectID": "Assignments/HW_2_pt1.html",
    "href": "Assignments/HW_2_pt1.html",
    "title": "",
    "section": "",
    "text": "HW 2 (Part 1): Informational Interview\nHW 2 (Part 1): Informational Interview Instructions and Hints\n\n\nInstructions: Familiarize yourself with informational interviews by googling / chatGPTing ‘informational interview’. Suggested below is a youtube video to get you started too. During class on January 24, you will ask the USFWS folks the questions below in a small group setting. You will then summarize your perception of the interview, reflecting on what you learned with your personal course goals, and share with the others. \n\n\nYoutube Description of Informational Interviews: https://www.youtube.com/watch?v=m6Pa4ZB4mvQ\n\n\nPotential Informational Interview Questions:\n\n\n\nWhat did your journey look like to get to where you are today?\nWhat is your day-to-day life like at work?\nWhat do you enjoy most about your work?\nWhat is your biggest challenge at your job?\nWhat would you like to be spending more time doing at your job?\nWhat skill sets are most important in your role?\nWhat professional trends or changes should I be aware of? What didn’t you know prior to your position that you wish someone had told you?\nIf you were in my shoes, what people would you be talking with?\nCan you connect me with 3 “nouns” (people/places/or things) I should be looking into?\nStudents: come up with your own questions. What do you want to know from this expert? \n\n\n\nSummarize : Reflect on the informational interview you conducted. In 1 - 2 pages, please answer\n\nWho did you interview? \nWhat was your interviewee’s path to their current position?\nWhat is their current position like (activities, challenges, skills, etc)? Do you think you would enjoy their job? Why or why not?\nWhat was one thing that surprised you about your informational interview?\nWhat “nouns” (Q8) did your interviewee connect you with? Are you interested in them? Have you followed up with them? \nHave you ever conducted an informational interview? How was this process for you in general? \n\n\n\n\nFor those of you looking for extra challenges in this exercise\n\n\nProfessional Challenge: Do informational interviews with 2 other people the USFWS folks suggest you chat with next\n\n\nCoding Challenge: Make your informational interview summary as a markdown file"
  },
  {
    "objectID": "Assignments/HW_2_pt2.html",
    "href": "Assignments/HW_2_pt2.html",
    "title": "",
    "section": "",
    "text": "HW 2 (Part 2): Resume\nResume Instructions and Hints\n\n\nBackground: A resume is a list of knowledge, skills, and abilities for that particular job.  Or how will you be able to do the job advertised? Thus each resume is tailored to the job posting. So the template (or where stuff goes) of the resume is the same, but the content (or the stuff) changes for each job.\n\n\nA resume is different from a CV.  A CV is the list of all your past achievements and deliverables. It is not tailored for a specific posting. The template and the content remain stable until achieving new deliverables such as a presentation, a publication, a new skill etc.\n\n\nThere are thousands of resume templates on the internet that can help you to get the position you desire; the challenge is finding the best resume template for your needs. Remember, the resume and the cover letter introduces you to potential employers and recruiters. But before you even talk with another human, an algorithm will approve your resume for human eyes to look at so make sure to use those keywords that are in the job announcement. Without those, you are unlikely to get an interview.\n\n\nYour resume should be 1) easy to read 2) easy to find keywords related to the announcement 3) be honest about your skills and abilities and 4) represent who you are as a potential colleague\n\n\nThis is for computer science students but it gives some nice examples of how to make this work for recent grads without much experience (keep scrolling on it, so many ads https://zety.com/blog/computer-science-resume). Also CrashCourse has a good series on Youtube (https://www.youtube.com/watch?v=T_4JBbeGsSE). The example provided is a bit more CV like than resume like. See if you can improve on it. \n\n\nInstructions: Write a 1 page resume for an ecological job with data science skills/tools you think you would like. Highlight what skills you need but don’t have for this type of work using a different color text. Resume should be no longer than a page (eek, we know).\n\n\nFor those of you looking for extra challenges in this exercise\n\n\nProfessional Challenge: Create this assignment with data science features (e.g. link to your GitHub, data science knowledge skills and abilities you have and/or hope to have by the end of class)\n\n\nCoding Challenge: Create this assignment in markdown"
  },
  {
    "objectID": "Assignments/HW_6.html",
    "href": "Assignments/HW_6.html",
    "title": "",
    "section": "",
    "text": "HW 6: Current & Future SDM\nSpecies Distribution Modeling Instructions\n\n\nUsing the code from class, create \n\nA current species distribution of your focal SSA species\nA future species distribution (70 years from now) of your focal SSA species \n\n\n\nEach data visualization of the model needs to include\n\nA descriptive title\nAxes labels\nClear legend \nCountry and state borders\n\n\n\nEach person needs to turn in\n\nAn image of your current species distribution of your focal species\nAn image of your future species distribution (70 years from now) of your focal species\nThe .R file you used to create those images\n\n\n\n\nFor those of you looking for extra challenges in this exercise\n\n\nProfessional Challenge: Add a paragraph explaining this figure similar to what you would see in an SSA publication. E.g. Figure 2: Maxent Species Distribution Model of the Foothill Yellow-Legged Frog (Rana boylii). This species is mostly detected on coastal California however suitable habitat extends into the central valley. Occurrence data was downloaded from GBIF on 02/03/2023 (doi:) and available on GitHub (link).  \n\n\nCoding Challenge: Transfer your .R  to a .md with instructions ready to be published on GitPages for others to learn how you did your model."
  },
  {
    "objectID": "Assignments/HW_4.html",
    "href": "Assignments/HW_4.html",
    "title": "",
    "section": "",
    "text": "HW 4: Occurrence Map\n2023 Occurrence Map Instructions\n\n\nUsing the species your group decided on, each person needs to turn in a .R file in which you\n\nObtain data\n\nFrom  GBIF\nSet limit = 4000\n\nClean data \n\nRemove duplicates\nRemove where lat/long are NA\nRemove points where occurrence status is not present\nplaces that are not logical… be sure to justify with comments what points you determined were not logical ie. this species is endemic to Oregon so I can remove points in Australia\n\nCreate a map of the occurrence points\n\nAxes labels\nBorders of countries and states\nDescriptive title\n\n\n\n\nUsing comments, write a sentence or two describing what the occurrence points are. \n\n\nYou will have class time on Tuesday Feb 14 to work on this."
  },
  {
    "objectID": "Assignments/HW_5.html",
    "href": "Assignments/HW_5.html",
    "title": "",
    "section": "",
    "text": "HW 5: Natural History and Taxonomy\nNatural History Information Instructions\n\n\nFill in the following subsections for your group’s chosen species. Each person will submit their own work. Later when making the final document for USFWS, you will aggregate and edit everyone’s information into one document. This homework should be a minimum of 1 page single spaced. (Note - interpret “pp” below as paragraphs, not pages for your answers to this.)\n\n\nSee SSA for CactusFerruginousPygmyOwl https://ecos.fws.gov/ServCat/DownloadFile/211651 for what this looks like in the final report. We are aiming for your sections to be included in the document, but not provide all of the content (USFWS needs to make a lot of content!). \n\n\nTaxonomy: (1-2 pp) What is this species referred to in the literature and how confident are we that it isn’t a different species? E.g. species name, taxonomic affiliations, systematic relationships (ie close relatives), species status (ie how certain are we about the taxonomy)\n\n\nKey Identification Characteristics: (1 pp) what characteristics do you use to id this species\n\n\nHabitats: (1-2 pp) What kinds of habitats does your species affiliate with (ie riparian, alpine, thorn scrub, etc)\n\n\nHistoric Range: (1 pp) Where is the species thought to have occurred in the last 50 years 9e.g. Western North America, Central North America, Northern Florida etc, etc)\n\n\nReferences: Please reference your information as best you can including primary sources whenever possible. Again this makes it easier for USFWS to make their final SSA report.\n\n\nFor those of you looking for extra challenges in this exercise\n\n\nProfessional Challenge: Add another section on key life history and/or population movement components you think will be useful for determining status of this species under the 3 Rs (Resiliency, Representation, and Redundancy)\n\n\nCoding Challenge:Make your informational interview summary as a markdown file ready to be published on GitPages\n\n\n\nPp = paragraph"
  },
  {
    "objectID": "Assignments/HW_1.html",
    "href": "Assignments/HW_1.html",
    "title": "",
    "section": "",
    "text": "HW 1: Data Science Tools\nHW 1: Data Science Tools Instructions\nPurpose: The goal of this homework is to introduce you to the data science tools we will use in this class. We do not expect you to come into this class with this knowledge. Some of these tools will likely be new to everyone.\nBackground: Data Science is an ever changing assortment of tools and approaches. In this course, we will use a variety of them to create a report on a species that is being evaluated for endangered species status. You will learn the natural history of a species and use data to create maps related to where the species has been found and where it could be found given the same environmental conditions using models. You will then share your report with the world on the internet using some of the tools listed below.  \n\nThis homework will introduce you to/ remind you of the following programs that are commonly used in ecological research to create projects like the one you will do this semester. All of these are essential tools in ecological and conservation research, for now. \n\nR Language for Programming\nR packages\nR Studio\nGit\nGitHub\nR Markdown\nZenodo\n\nTo Do: In a couple paragraphs for each tool (~2-4 page single-spaced total), explain what each of the above tools is, and what it is primarily used for in data science. Of course you may Google these, but describe them in your own words. For each of these tools write a sentence or two about how they might be used in a project applied to conservation, like the one you will create this semester.\n\n\nFeel free to use headers and subheaders to organize your work. For example, \nR Programming Language (https://www.r-project.org)\nWhat is R?\nR is an open source language and environment for statistical computing and graphics derived from the S language and environment developed in Bell Laboratories (AT&T) to turn ideas into software, quickly, and faithfully. Etc, etc, etc\n\nWhy use R for statistical computing and graphics?\nR provides a transparent and reproducible way to analyze and visualize data \n\nHow and why will I use R in my research project / life ?\nFor everything! All the R. I use it to calculate my taxes and weekly budget\n\n\nFinally, please create a GitHub account.\n\n\nFor those of you looking for extra challenges in this exercise\n\n\nProfessional Challenge: Identify 2 new skills from this exercise that you would now like in your course personal goals\n\n\nCoding Challenge: Create this assignment in markdown\n\n\nTo Complete this Homework:\n\nL&C students upload your document in Moodle\nUA students upload your document into D2L\nUpdate the google sheet below with your GitHub and Slack Username https://docs.google.com/spreadsheets/d/1ooLI9HfDxCiuGlLvv8L5sxLxbeWj6d5IGIapKAPUdA4/edit?usp=sharing\nIf you have not joined Slack (in class activity), please do so here."
  },
  {
    "objectID": "Assignments/HW_3.html",
    "href": "Assignments/HW_3.html",
    "title": "",
    "section": "",
    "text": "HW 3: Practice with GitHub\nNote: It is critical you do these steps in the exact order outlined below.\n\n\nGetting your group repository onto your posit cloud\n\n\n\nLog in to your personal GitHub account\nNavigate to our class’ organization, BiodiversityDataScienceCorp\nFind the repository that has your group name on it\nClick the green code button and copy the link there\nLog in to your posit cloud account\nCreate a new project: new project from Git Repository\nPaste the link you copied from GitHub when prompted\n\n\n\nYou now should have a project in posit.cloud that is your local copy of your group’s repository. This project should already be populated with a gitignore, license, and README file. There should be a Git tab in the top right corner of R studio.\n\n\nSetting up your group repository for commits/pushes/pulls\n\nIn this new project in rstudio cloud, add a line in the gitignore file that says “github.R”\nCreate a new .R file and name it “github.R”\nCopy the contents from the github.R file you have in the project you created during class\nPaste them to the new github.R file in your group repository. Save it. Highlight all of the code and run it. \n\n\n\nYou now should be able to commit/push/pull to/from GitHub to work collaboratively with your group. \n\n\nTo work collaboratively with GitHub / R studio, follow this flow\n*Only one person edits the same file at a time. If two people edit the same document simultaneously, you will have to do extra work to ensure all of your saves are committed properly. \n*Multiple people can work at once on different files. For example, Person A can edit your README while Person B edits your gitignore. \n\nPerson A: Write some code in a file and click save when you are done\nPerson A: Commit and push the code. Leave a detailed commit message for your future self if you ever need to go back to a previous version. Be sure to push. \nPerson B: Pull first!!! \nPerson B: Edit the file. Save. Commit. Push. \nPerson A: Pull. Etc. You now have a rhythm for working on the same file. \n\n\n\nSetting up your repository’s README file\n\n\nREADMEs are written in markdown. See this markdown cheat sheet for a guide on how to create headings, change the font, etc. \n\n\nYour README file needs to contain, at the least: \n\nYour group members’ names\nYour species\nHave each group member write one paragraph about their favorite species (and commit/push/pull themselves). Remember to take turns. \n\n\n\nTips\n\nAlways save, commit, and push after working on a file\nAlways pull before working on a file\nGive your commit messages descriptions that would help you if you needed to “undo” to go back to a previous version\nCommunicate with your group when you plan to work on a file so two people are not working on the same file at once\n\n\n\n\nFor those of you looking for extra challenges in this exercise\n\n\nProfessional Challenge:Add your github information to your resume\n\n\nCoding Challenge:  Add a photo of your species to your README file. You’ll need to upload the photo to your repo, then you can use markdown syntax to call the photo."
  },
  {
    "objectID": "home.html",
    "href": "home.html",
    "title": "",
    "section": "",
    "text": "Home\n Our Team\n Contact Us\n\n\nCourse Materials\n Syllabus\n Schedule\n Coding Boot Camp\n Readings\n Lessons\n Assignments\n\n\nFor Instructors\n Creating your own website\n Tips"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Home\n Our Team\n Contact Us\n\n\nCourse Materials\n Syllabus\n Schedule\n Coding Boot Camp\n Readings\n Lessons\n Assignments\n\n\nFor Instructors\n Creating your own website\n Tips"
  },
  {
    "objectID": "Info/contact_us.html",
    "href": "Info/contact_us.html",
    "title": "",
    "section": "",
    "text": "Contact Us"
  },
  {
    "objectID": "Info/syllabus.html",
    "href": "Info/syllabus.html",
    "title": "",
    "section": "",
    "text": "Syllabus\n\nDescription\nWelcome to Applied Data Science. This class is a structured practicum with the goal of supporting students to build knowledge and skills relevant to applying data science to issues of species conservation. The class is a collaboration between students at the University of Arizona and Lewis & Clark College. We will work together with professionals at the US Fish & Wildlife Service who are on the front lines of managing endangered species. You will work in teams to organize, clean, analyze and visualize data to help improve conservation approaches and management efforts for species of concern in the US. In this process you will be introduced to the realities of conservation jobs in governmental and nonprofit organizations and help you build professional skills that are relevant in these fields. You will also learn more about data science in general and project management best practices of working as a team.\n\n\nCourse Prerequisites\nNone, but students should have had beginning experience with R programming language demonstrated in course work or other activity.\n\n\nLearning Objectives\nDuring this course, we expect students to:\n\nApply computational methods for handling and using data to inform questions and solve problems;\nImplement professional practices to produce data-informed deliverables useful for stakeholder decision making;\nPractice communicating insight from data through written, visual, and verbal media to a variety of audiences;\nCreate a professional toolbox of applied data science skills useful for applications of interest and future careers;\nSummarize and appraise data science approaches as they relate to addressing real-world challenges.\n\n\n\nLearning Outcomes\nBy the end of this course, students will:\n\nDefine, differentiate, and explain the nature and application of modern computational methods for handling and using data as it relates to real-world situations and challenges;\nAssociate, examine, and compare how to infer meaning and insight from data through written, visual, and verbal communication to both experts and non-experts;\nSummarize, implement, and appraise data analytics and their interpretation in relation to real-world circumstances;\nPractice, manage, and design a personal toolbox of data skills useful for various careers and professions"
  },
  {
    "objectID": "Info/our_team.html",
    "href": "Info/our_team.html",
    "title": "",
    "section": "",
    "text": "We have a deep bench of support available at both Lewis & Clark College and the University of Arizona. Here is a list of all of our support, listed by category.\n\n\n\n\nKaty Prudic, Assistant Professor, School of Natural Resources, University of Arizona UAZ instructor of record\nGreta Binford, Professor, Biology Dept, Lewis & Clark LC instructor of record\n\n\n\nJeremy McWilliams, Head of Digital Services, Watzek Library, Lewis & Clark\nEthan Davis, Data Science Specialist, Watzek Library, Lewis & Clark\nJeff Olivier, Data Science Specialist, Libraries, University of Arizona\nMila Pruiett, Data Science Coordinator, Lewis & Clark\n\n\n\nJill Williams Associate Research Professor, Gender and Womens Studies, University of Arizona"
  },
  {
    "objectID": "Readings/readings.html",
    "href": "Readings/readings.html",
    "title": "",
    "section": "",
    "text": "Readings\ndetails about reading assignements"
  },
  {
    "objectID": "Readings/reading_1.html",
    "href": "Readings/reading_1.html",
    "title": "",
    "section": "",
    "text": "Week 1 Reading\n\n\nLinks\nWhat is a Species Status Assessment (SSA)?\nThe Endangered Species Act (ESA)\nEcological Services provided by the US Fish and Wildlife Service\nWhat US Fish and Wildlife Service does with the ESA\n\n\nReading Questions"
  },
  {
    "objectID": "Readings/reading_2.html",
    "href": "Readings/reading_2.html",
    "title": "",
    "section": "",
    "text": "R (programming language)\nIDE\nThe Center for Open Science\nUNESCO Recommendations for Open Science"
  },
  {
    "objectID": "Readings/reading_3.html",
    "href": "Readings/reading_3.html",
    "title": "",
    "section": "",
    "text": "Data cleaning\niNaturalist and Scientific Discoveries - read through Data Validation\nUses of GBIF in conservation - watch the video"
  },
  {
    "objectID": "Readings/reading_4.html",
    "href": "Readings/reading_4.html",
    "title": "",
    "section": "",
    "text": "Scientific article on public database accuracy for SDMs - case study, read introduction and discussion\nAbstract from Biodiversity Information Science and Standards 2022 - conference proceedings abstract\nUSGS Wildlife wrangler GitLab - read ReadMe.md especially Valuable Features"
  },
  {
    "objectID": "Readings/reading_5.html",
    "href": "Readings/reading_5.html",
    "title": "",
    "section": "",
    "text": "Ecological niche\nGeneral intro to the concept of SDM\nMore detailed slide deck about SDM\nAbout MaxEnt, a type of SDM"
  },
  {
    "objectID": "Lessons/data_aquisition_cleaning.html",
    "href": "Lessons/data_aquisition_cleaning.html",
    "title": "",
    "section": "",
    "text": "Querying, cleaning, and mapping GBIF data\n\nIn this lesson, you will learn\n\nWhat species occurrence data is\nHow to obtain publicly-available occurrence data from GBIF\nHow to plot occurrence data with ggplot\nHow to clean occurrence data\n\n\n\nWhat is species occurrence data?\nOccurrence data is a record of where a species was at a given time.\n\n\nHow can we get occurrence data?\nWe can use the Global Biodiversity Information Facility. Data on GBIF is sourced from a wide variety of places: from users on iNaturalist equipped with a smartphone to museum specimens. You will read more about the accuracy of citizen science collected occurrence data on February 14.\nFirst we need to load the necessary packages. We will use the tidyverse for data cleaning and visualization. We will use a package called spocc, which stands for “interface to SPecies OCCurence data sources.”\n\n#Install packages from cran, necessary to specify the repos on quarto but not on your local computer copy\ninstall.packages(\"spocc\", repos = \"http://cran.us.r-project.org\")\n\nInstalling package into '/Users/MilaUserAccount/Library/R/x86_64/4.2/library'\n(as 'lib' is unspecified)\n\n\n\nThe downloaded binary packages are in\n    /var/folders/8_/66ctd00n6b9839b2ghhk1gjw0000gp/T//Rtmpq2csQy/downloaded_packages\n\ninstall.packages(\"tidyverse\", repos = \"http://cran.us.r-project.org\") #includes ggplot\n\nInstalling package into '/Users/MilaUserAccount/Library/R/x86_64/4.2/library'\n(as 'lib' is unspecified)\n\n\n\nThe downloaded binary packages are in\n    /var/folders/8_/66ctd00n6b9839b2ghhk1gjw0000gp/T//Rtmpq2csQy/downloaded_packages\n\n\nLoad libraries\n\nlibrary(spocc)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\n\nRemember to use lots of comments on your own copy of this code, to help yourself remember later on!\nWe can directly query occurrence data in R with the “occ” function, which is part of the spocc package.Take a look at the documentation. In groups: write a query for Rana draytonii from GBIF, from any country during any time period. Limit it to 5000 occurrences.\n\nmyQuery <-occ(query=\"Rana draytonii\", from=\"gbif\", limit=5000)\nmyQuery\n\nSearched: gbif\nOccurrences - Found: 4,611, Returned: 4,611\nSearch type: Scientific\n  gbif: Rana draytonii (4611)\n\n\nGreat! Now we have our query. We need to access the actual data from GBIF. We will use the “$” to navigate the layers of this data.\n\nrana <- myQuery$gbif$data$Rana_draytonii\n\n\n\nHow can we plot occurence data simply to look for outliers\nLet’s initially plot this data on a map. It can be especially useful with species occurrence data to look at the distribution on a world map to find any outliers. We will use the map data in ggplot2 to add country lines as well. We’ll go into more detail in the next lesson about using ggplot2 for an occurrence map.\n\nwrld<-ggplot2::map_data(\"world\") # obtaining world borders\n\nggplot()+\n  geom_polygon(data=wrld, mapping=aes(x=long, y=lat, group=group), fill=\"grey75\", colour=\"grey60\")+\n  geom_point(data=rana, mapping=aes(x=longitude, y=latitude), show.legend=FALSE)+\n  labs(title=\"Species occurrences of R. draytonii\", x=\"longitude\", y=\"latitude\")\n\nWarning: Removed 1738 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nHow can we clean our data\nNow we want to clean our data. What do we need to do based on the reading for today? We need to: remove outliers (outside of normal sp range), remove duplicates, and deal with NA values. Looking at the map, we can see there are a few points in Africa. This is likely due to a recording error of the location, as they are near (0,0). We can also remove them on the basis of pre-existing knowledge that these frogs are only found in the southwestern United States. We are going to use the pipe %>% to string together a series of commands.\n\ncleanRana <- rana %>% \n  filter(longitude < 0) %>%  # this is one way of removing the pts in Africa\n  filter(latitude != \"NA\", longitude != \"NA\") %>%  # remove places where lat or long are NA\n  filter(occurrenceStatus == \"PRESENT\") %>% \n  mutate(location = paste(latitude, longitude, dateIdentified, sep = \"/\")) %>% # remove duplicates: create a new column that states the location and time\n  distinct(location, .keep_all = TRUE) # remove duplicates: keep only one per duplicated entry\n\nOur data, cleanRana, has over 140 columns! That is a lot of information that we do not need. We are going to pick out only the columns we need.\n\ncleanRanaSubset <- cleanRana %>% \n  select(longitude, latitude, eventDate)\n\n\n\nWriting our data to a csv file\nLastly, we are going to write our clean data to a csv file so we can use it in later lessons.\n\nwrite.csv(cleanRanaSubset, \"ranaData.csv\")\n\nGreat job!"
  },
  {
    "objectID": "Lessons/sdm.html",
    "href": "Lessons/sdm.html",
    "title": "",
    "section": "",
    "text": "SDM\nto uncomment everything once the UC davis server is back up, highlight everything and hit comand+shift+c on a mac"
  },
  {
    "objectID": "Lessons/occ_map.html",
    "href": "Lessons/occ_map.html",
    "title": "",
    "section": "",
    "text": "Occurrence Map\n\nIn this lesson, you will learn\n\nHow to plot species occurrence data onto a world map\n\n\n\nInstall and load packages\n\ninstall.packages(\"tidyverse\", repos = \"http://cran.us.r-project.org\") #includes ggplot\n\nInstalling package into '/Users/MilaUserAccount/Library/R/x86_64/4.2/library'\n(as 'lib' is unspecified)\n\n\n\nThe downloaded binary packages are in\n    /var/folders/8_/66ctd00n6b9839b2ghhk1gjw0000gp/T//RtmpGtUpIV/downloaded_packages\n\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\n\n\n\nRead the data\n\nranaData <- read_csv(\"ranaData.csv\")\n\nNew names:\nRows: 1792 Columns: 4\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" dbl\n(3): ...1, longitude, latitude date (1): eventDate\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n\n\n\n\nSetting the x and y limits of our map\nWe want our map to be centered on where our occurrence data is found. To do this, we will create x and y limits based on the latitude (y) and longitude (x) values of our cleaned data.\n\nxmax <- max(ranaData$longitude) \nxmin <- min(ranaData$longitude) \nymax <- max(ranaData$latitude) \nymin <- min(ranaData$latitude)\n\n\n\nFinding the date range\nSince we didn’t specify the date range in our data acquisition call from GBIF, our species occurence data spans an unknown date range. It’s a good idea to include the date range in the title of the plot. We can use the range function.\n\nrange(na.omit(as.Date(ranaData$eventDate)))\n\n[1] \"1891-09-30\" \"2023-04-11\"\n\n# our date identified ranges from 1891 to 2023\n\n\n\nMapping\nWe will use ggplot2 to plot our data and style our map.\n\nwrld <- ggplot2::map_data(\"world\") # obtaining world borders\n\nggplot() + # call ggplot\ngeom_polygon(data = wrld, mapping = aes(x=long, y=lat, group=group), fill=\"grey75\", colour = \"grey60\") + # add world shapes, which are polygons stored in the df wrld\n                   # we can specify the color, which is the border, and the fill, which is                      the inside of the shape\n  geom_point(data = ranaData, mapping=aes(x=longitude, y=latitude), show.legend=FALSE) + # our lat/long data are points on an x/y grid. We suppress the legend. \n  labs(title=\"Species occurrences of R. draytonii from 1891 - 2023\", x=\"longitude\", y=\"latitude\") + # add labels to the graph\n  coord_fixed(xlim = c(xmin, xmax), ylim = c(ymin, ymax)) + # give it our x and y limits to center the graph\n  scale_size_area() + # scales the map accordingly \n  borders(\"state\") # add state borders"
  },
  {
    "objectID": "Lessons/lessons.html",
    "href": "Lessons/lessons.html",
    "title": "",
    "section": "",
    "text": "Lessons"
  },
  {
    "objectID": "Lessons/github_rstudio.html",
    "href": "Lessons/github_rstudio.html",
    "title": "",
    "section": "",
    "text": "Github / RStudio lesson\nOverview\nToday we will be working with two primary technologies, and setting up and practicing how they interact with each other:\nGithub - a website to showcase projects that typically include computer programming. Here’s a sample project from last year’s class.\nRStudio - a programming environment for the R programming language. We will be using the web version of RStudio, on the website posit.cloud.\nStep 1: Create a new GitHub repository.\nA repository contains all of your project’s files and each file’s revision history.\n\nSign in to your github account.\nClick the “Repositories” tab (or, click your icon in the upper right corner, and select Your Repositories)\nClick the button.\nIn the resulting page:\n\nGive your repository a name (e.g. rstudio-test or something similar) and description (e.g. Practicing github and posit.cloud).\nMake sure public is selected.\nCheck the box to Add a README file.\nUnder Add .gitignore, select the R template.\nUnder Choose a license, select BSD-2 Clause “Simplified” License.\nClick Create repository.\n\nWhile on your repository’s page, copy the URL (or just leave the tab open).\n\nStep 2: Create a Personal Access Token in GitHub.\nThis is your authentication key that lets Github and RStudio communicate.\n\nWhile signed in to GitHub, click your user icon in the top right, and select “Settings”.\nScroll down the resulting page, and select “Developer Settings” from the left menu.\nSelect “Personal Access Tokens -> Tokens (classic)”\nClick “Generate New Token -> Generate New Token (classic)”\n\nAdd a note to identify the token (e.g. “For use with posit.cloud”)\nExpiration: select “custom”, and set it to sometime in mid-May.\nSelect scopes: click the “repo” checkbox.\nAt the bottom, click “Generate Token”\n\nIn the resulting page, copy your token, and save it somewhere safe!!\n\nYou might considerslacking it to yourself.\n\n\nStep 3: Signing in to posit.cloud, and creating a new project from your GitHub repository.\nPosit.cloud contains the web version of RStudio, which you will use for group work.\n\nFollow this link to posit.cloud: https://posit.cloud/spaces/322886/join?access_code=eMHmVALtwA4bmBTQHFcXWhN7l_tGQLgcffwfmxqH\nClick “Log In with Google”, and sign in with your university gmail account.\nWhen prompted to join space, click “Yes”.\nNote: the left tab lists your workspaces. You have a personal workspace (“Your Workspace”), and a course-specific workspace (“RNR 496B / DSCI 245 - 23/SP - Prudic/Binford”). For the work in this class, make sure the class workspace is selected.\nClick the Content tab at the top, and click New Project->New Project from Git Repository.\nPaste the URL of your Github repository from Step 1 in the window, and click Ok. This will initiate the creation of the project, and will pull any files from the GitHub repository into the project.\nQuick overview of rstudio windows:\n\nUpper left: where you read/write files in your project.\nLower left: R console, where R code can be executed\nUpper right: Environment Variables, History, Git tabs (for projects from GitHub repositories)\nLower right: Files\n\n\nStep 4: Connecting your rstudio project to your GitHub repository\nThis is necessary to synchronize the work you do on rstudio with your GH repository.\n\nIn your rstudio project, either create a new .R file (File->New File->R script), or use the default “Untitled1” file in the upper-left window.\nCopy the contents of this, and paste it into your file in RStudio.\nIn that file, edit the three lines that define the email, user, and token variable values:\n\nemail: the email associated with your GitHub account\nuser: your github user account\ntoken: the personal access token you created inStep 2\n\nSave this file as github.R.\nOpen the .gitignore file, scroll to the end, add github.R on a new line, and save.\nGo back to github.R, highlight its contents, and click “Run”.\n\nThis will install necessary R packages, and allow you to “push” content from your rstudio project to your GitHub repository.\n\n\nStep 5: Practice the rstudio/GitHub workflow\nWrite code-commit-push-pull.\n\nCreate a new .R file by clicking on the  tab in the lower right pane\nWrite some code or #comments \nSave the file and give it a name\nGo to the  Git tab of the upper right pane\nOpen github.R, highlight all of the contents, and run it. You only need to do this every once in a while to connect with github\nClick on the box to highlight your newly created .R file \nClick on commit\nNow you should be in a new window. Write a commit message and hit the commit button\nExit out of the commit window.\nClick on push in the Git tab of R studio cloud. Now your github repository should be updated and contain this file you just created. Go check it out.\nPull after every commit and before working on a file. This isn’t necessary when you are the only contributor to a project, but it is a good habit to get into when you are working in your team. \n\nTime permitting, repeat the workflow by editing your README.md file, using markdown. (this will be addressed more in the homework)."
  },
  {
    "objectID": "For_Instructors/create_website.html",
    "href": "For_Instructors/create_website.html",
    "title": "",
    "section": "",
    "text": "If you’d like to create your own version of the website, here are the steps you need to follow.\n\n\n\nHave R and R studio on your local machine\nHave Quarto on your local machine\nInstall the font awesome extension to your computer. You can do this within the terminal in R studio once you’ve cloned the repository (step 2)\nHave a GitHub account\nGenerate a personal access token in GitHub. Remember to put the token somewhere safe! You won’t be able to look at it again once you exit that window.\n\n\n\n\n\nFork the repository. This should create a repository in your profile at https:://github.com/your-username/ADS_Cannonical_Version.\nClone the repository to your local machine.\nIntegrate GitHub and your credentials into R. You can do this by filling out the githubConnect.R file in your copy of the repo with your credentials, and running it. Very important: Add the githubConnect.R file to the .gitignore before moving on so you don’t accidentally commit your token. Learn more about .gitignore files here\nModify! Some files that may be especially of interest to modify are the syllabus, schedule, assignment submission instructions, and the instructor information and contact details."
  },
  {
    "objectID": "For_Instructors/tips.html",
    "href": "For_Instructors/tips.html",
    "title": "",
    "section": "",
    "text": "Tips"
  },
  {
    "objectID": "Bootcamp/bootcamp_1.html",
    "href": "Bootcamp/bootcamp_1.html",
    "title": "",
    "section": "",
    "text": "You can save a blank version of this lesson to your computer to run the code chunks yourself by downloading the file below and opening it in your R studio. Come back and check your answers here!\n\n\n\n\n\n\n Download file"
  },
  {
    "objectID": "Bootcamp/bootcamp_1.html#welcome-to-rstudio",
    "href": "Bootcamp/bootcamp_1.html#welcome-to-rstudio",
    "title": "",
    "section": "Welcome to rstudio!",
    "text": "Welcome to rstudio!\nLet’s start off by clicking the “Visual” button above, so this document is a little easier to read and work with. You’ll likely get a popup window the first time, confirming that you want to switch to Visual Mode. Just click Use Visual Mode\n\nLearning objectives\n\nGain some familiarity with rstudio\nLearn how to run R code in “code chunks”\nPerform some arithmetic with R\nCreate variables in R, and assign values to them\nFunctions\n\n\n\nrstudio windows\nYou’ll notice rstudio is divided into 4 windows. Let’s take a look at each one: - upper-left: this is the area for reading / writing files. We’ll probably use this window the most this semester. - lower-left: this is the console, where you can run R code directly. You might use this occasionally, but for the most part probably won’t have to. - upper-right: this window has a couple useful tabs: - Environment: any variables you create will be listed here. This can be useful for quick reference. - History: this shows the R commands you’ve run within a session. - Connections: this will be important for using GitHub, which we will get to later in the semester - lower-right: this window lists any files and folders that are part of your project/assignment. It also has tabs that can display plots and help documentation. You can resize windows / borders as needed in order to more easily focus on the particular window you’re using.\n\n\nCode chunks\nThe grey rectangles below are “code chunks”, where you can type and execute R code. We will use them in these lessons. In class, you will use .R files, which essentially are entirely code chunks. To run the code, click the green triangle in the upper-right corner of the code chunk. Let’s try running the code chunk below, which is just some simple arithmetic:\n\n2 + 5 \n\n[1] 7\n\n\nNow it’s your turn. In the code chunk below, enter a command to subtract 7 from 18, and run it:\n\n# Enter code below (by the way, I'm a comment. I'm a way for you to leave notes in the code. Simply put a hashtag and type away.)\n\n\n\nVariables\nProgramming languages, including R, rely heavily on the use of variables. A variable is something you define and assign a value to. In the code chunk below, we’re creating a variable called x, and assigning the value of 7 to it:\n\n# Notice we use a 'left pointing arrow' to assign the value\nx <- 7 \n\nWe don’t get any real feedback from running the code above, but it’s often a good idea to check your work by printing a variable’s value to the screen. To do this, you can run code that simply lists the variable, here x. R will remember the variables you assign. You can see what R is “remembering” by looking at the environment tab in the top right.:\n\n# prints to the screen:\nx\n\n[1] 7\n\n\nIt’s worth noting that you can run multiple lines of code within a code chunk:\n\n# create a variable \"penguinCount\" and give it the value 3\npenguinCount <- 3\n# print to screen\npenguinCount\n\n[1] 3\n\n\nNow it’s your turn. Work with your group / people next to you, and do the following:\n\ncreate a variable called y, assign three plus eight to it, and print to the screen.\ncreate a variable z, and assign x+y to it, and print to the screen\n\n\n# create the variable \"y\" here, and print to screen\ny <- 3 + 8\n\n\n# create the variable \"z\" here, and print to screen\nz <- x + y\n\n\nFunctions\nCoding languages, including R, have functions that help you quickly execute common tasks. Functions typically take the form of:\nfunctionName(argument1, argument2, etc….)\nArguments are the inputs you send to a function, so it has all the information it needs to perform its operation.\nFor example, the function sqrt(number) takes the square root of a number. This lets us quickly compute the answer, rather than having to write the formula for a square root.\n\nsqrt(9)\n\n[1] 3\n\n\nYOUR TURN: In the chunk below, create a variable `rooted``, set it equal to the square root of 90, and print it out:\n\nrooted <- sqrt(90)\n\nOne nice thing about rstudio is that you can readily access documentation for functions by using the “help” command:\n\nhelp(sqrt)\n\nThe documentation appears in the lower right window in the “help” tab.\nOne key question: how do you know what functions exist, and what they do?\nAnswer: you Google what you’re trying to do! In the case of R, you might search “How do I do ‘x’ in R?”\nLet’s say you are interested in calculating the absolute value (positive distance from zero) of -35 in R. Take a moment with your group/neighbors, and try to find the answer by searching the internet. In the code chunk below, use the function you found to compute this calculation:\n\n# compute the absolute value of -35\nabs(-35)\n\n[1] 35\n\n\nYou made it!"
  },
  {
    "objectID": "Bootcamp/bootcamp_3.html",
    "href": "Bootcamp/bootcamp_3.html",
    "title": "",
    "section": "",
    "text": "Bootcamp Lesson 3\nYou can save a blank version of this lesson to your computer to run the code chunks yourself by downloading the file below and opening it in your R studio. Come back and check your answers here!\n\n\n\n\n\n\n Download file\n\n\n\n\n\nOnce you’ve completed the lesson\n\n\n\n\n\n\nExpand To See Solutions\n\n\n\n\n\n\nLearning objectives\n\nLoad and filter datasets as needed\nLearn the basic elements of ggplot\n\n\n\nWhat is ggplot?\nggplot is an R package created by Hadley Wickham (he’s kind of a big deal in the R world). The “gg” translates to “grammar of graphics”, and is founded in the idea that all data visualizations are comprised of three components:\n\ndata set\naesthetics, or visual marks that represent the data (i.e. the stuff that you see)\ngeometric objects, or “geoms” (e.g the type of plot)\n\nggplot is part of the “tidyverse” - a series of packages that share common strategies for working with data and generating visualizations. We can load all the packages at once (including readr, dplyr, and other packages for working with data) by running this command:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\n\n\n\nGetting Help\nggplot has many, many options and possibilities. When getting started (and even once you’re a ggplot expert), it’s a good idea to refer to documentation. In the “Files” section, click on the “ggplot2-cheatsheet.pdf”. The RStudio “help” function is also useful:\n\nhelp(ggplot)\n\n\nhelp(geom_jitter)\n\nAs always, entering your question or error message into your favorite search engine is trypically a pretty effective way to get help. Chances are good that someone else has already encountered a ggplot problem you’ve encountered, and the answers are likely online.\n\n\nPenguin Data\nWe are going to use the penguins data set again. To call up this data, we need to load the palmerpenguins package.\n\nlibrary(palmerpenguins)\n\nOur goal is to create a box plot that shows the difference in mass between the male penguins of the different species. With any programming problem, it’s good to think about it in terms of steps:\n\nload the data set\nfilter the data so it only contains data I’m interested in\ncreate a chart with that data\n\nOnce you break the problem down into steps, hopefully it’ll be easier to tackle. Plus, each individual step is ‘googleable’, so help is not far away.\nLet’s get the subset of the data that is only the male penguins. Assign this to the variable malePenguins. (Hint: if you don’t know how to do this, look back at the filtering section of lesson_2.Rmd)\n\nmalePenguins <- penguins %>% filter(sex == \"male\")\n\nHere is how we would make a basic boxplot with that data. We need to specific our data, and axes. We then say what type of plot we want, a boxplot.\n\nggplot(data=malePenguins, mapping=aes(x=species, y=body_mass_g)) +\n  geom_boxplot()\n\n\n\n\nLooking at the code, here’s how we’re including the three basic parts of a ggplot chart:\n\nDATA - data=malePenguins\nAESTHETICS - mapping=aes(x=species, y=body_mass_g)\nGEOM - + geom_boxplot() to create a box plot\n\nYOUR TURN:\nLet’s say you want to see if there is a relationship between a penguin’s body mass and it’s flipper length. Create this scatter plot. You don’t need to filter this data, since we are looking at all of the penguins. The x axis should be the body mass and the y axis should be the flipper length. Look at the ggplot2-cheatsheet.pdf to find out what the GEOM should be.\n\nggplot(data = penguins, mapping = aes(x = body_mass_g, y = flipper_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nLabels & Colors\nYou can specify labels to add to your plot by using the “labs()” function:\n\nggplot(data=malePenguins, mapping=aes(x=species, y=body_mass_g)) + \n  geom_boxplot() +\n  labs(x = \"Penguin Species\", y = \"Body Mass (g)\", title = \"Penguin body mass is different by species\")\n\n\n\n\nAdditionally you can add colors. You can add colors by a categorical variable (like species) by adding it to the aes argument. Here we will use “fill” because we want the color to fill the whole box. If we just have points, we can use “color =” instead.\n\nggplot(data=malePenguins, mapping=aes(x=species, y=body_mass_g, fill = species)) + \n  geom_boxplot() +\n  labs(x = \"Penguin Species\", y = \"Body Mass (g)\", title = \"Penguin body mass is different by species\")\n\n\n\n\nYOUR TURN: Can you add some labels and color by species to your scatter plot?\n\nggplot(data = penguins, mapping = aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_point() +\n  labs(x = \"Body mass (g)\", y = \"Flipper length (mm)\", title = \"Flipper length increases with body mass\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nSaving your plot\nTo save your plot as a file, you can use the ggsave() function. ggsave will save the last plot generated:\n\nggsave(\"plot.png\", height=5, width=5, units=\"cm\", scale=3)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\nFrom there, you can download your pot file, and use it however you choose.\nAwesome job!\nWe are going to use ggplot to create maps later this semester. The important thing is that you are familiar with the syntax in ggplot, not the specifics of a boxplot or scatter plot."
  },
  {
    "objectID": "Bootcamp/bootcamp_2.html",
    "href": "Bootcamp/bootcamp_2.html",
    "title": "",
    "section": "",
    "text": "Bootcamp Lesson 2\nYou can save a blank version of this lesson to your computer to run the code chunks yourself by downloading the file below and opening it in your R studio. Come back and check your answers here!\n\n\n\n\n\n\n Download file\n\n\n\n\n\nOnce you’ve completed the lesson\n\n\n\n\n\n\nExpand To See Solutions\n\n\n\n\n\n\nLearning objectives\n\nInstalling and loading a package\nOpening and looking at a data set\nAccessing a specific column in a data set\nSelecting columns to create a new variable\nRelational operators\nFiltering\nThe pipe %>%\n\n\n\nPackages\nWe often use packages when coding in R. Packages, very simply, are tool boxes that contain useful functions. We will use a package called the “tidyverse.” Tidyverse is designed for data science and is very useful for organizing, manipulating, and viewing our data.\nFirst we have to install a package if it has never been installed in a local project. You only have to do this once per file.\n\ninstall.packages(\"tidyverse\", repos = \"http://cran.us.r-project.org\")\n\nInstalling package into '/Users/MilaUserAccount/Library/R/x86_64/4.2/library'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://cran.us.r-project.org/src/contrib:\n  cannot open URL 'http://cran.us.r-project.org/src/contrib/PACKAGES'\n\n\nWarning: package 'tidyverse' is not available for this version of R\n\nA version of this package for your version of R might be available elsewhere,\nsee the ideas at\nhttps://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages\n\n\nWarning: unable to access index for repository http://cran.us.r-project.org/bin/macosx/contrib/4.2:\n  cannot open URL 'http://cran.us.r-project.org/bin/macosx/contrib/4.2/PACKAGES'\n\n\nOnce you have installed a package, you need to load it into your workspace. You need to do this every time you run the file.\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\n\nYour turn. For this lesson, we will use the “palmerpenguins” package, which contains a data set. This data has various measurements of penguins collectd near Palmer Station in Antarctica and was made available by Dr. Kristen Gorman.\nUsing the same syntax as above, install and load the “palmerpenguins” package.\n\ninstall.packages(\"palmerpenguins\", repos = \"http://cran.us.r-project.org\")\n\nInstalling package into '/Users/MilaUserAccount/Library/R/x86_64/4.2/library'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://cran.us.r-project.org/src/contrib:\n  cannot open URL 'http://cran.us.r-project.org/src/contrib/PACKAGES'\n\n\nWarning: package 'palmerpenguins' is not available for this version of R\n\nA version of this package for your version of R might be available elsewhere,\nsee the ideas at\nhttps://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages\n\n\nWarning: unable to access index for repository http://cran.us.r-project.org/bin/macosx/contrib/4.2:\n  cannot open URL 'http://cran.us.r-project.org/bin/macosx/contrib/4.2/PACKAGES'\n\nlibrary(\"palmerpenguins\")\n\nNow we have access to a data set, called penguins.\n\n\nLooking at a data set and accessing a column\nYou can get a glance of a data set with the function “glimpse.”\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nFrom glimpse above, we can see that the data set contains 8 columns. To access one column, we use the dataSet$column syntax. We can then assign it to a variable.\n\nislands <- penguins$island\n\nNow your turn. Create a variable (remember, to assign a variable use the syntax: x <- thing) called penguinFlipperLength that is the flipper_length_mm column.\n\npenguinFlipperLength <- penguins$flipper_length_mm\n\n\n\nSelecting\nWhile the syntax data$ColumnName is useful in many cases, there are times when we want to have multiple columns in a new variable. For example, we may be interested in only the penguin island and mass. We can do this with the select function.\n\npenguinIslandMass <- select(penguins, island, body_mass_g)\n\nYour turn. Select species and flipper_length_mm and assign it to the variable penguinSpFlipper.\n\npenguinSpFlipper <- select(penguins, species, flipper_length_mm)\n\nSelect is very useful when we have a large data set that contains information that we are uninterested in, or when we need to put our data in a specific format.\n\n\nFiltering\nLet’s say we wanted to look at just a subset of the penguins. There are a few species of penguins in the data. We could scroll through all 344 rows of the data and note the species, or we could have R do this for us.\nTo know all of the species present in the data, we can use the function ‘unique’. Unique looks for all of the unique values. The argument we will give unique is the specific column that we want to know all of the species of.\n\nunique(penguins$species)\n\n[1] Adelie    Gentoo    Chinstrap\nLevels: Adelie Chinstrap Gentoo\n\n\nGreat! Now we see there are three species of penguins. Let’s say we want all of the data for only the Adelie penguins. We can accomplish this with filtering. The syntax is filter(data, column name relational operator value). Note that we need to put Adelie in quotes because it is a word. If we filter by a number, we don’t need quotes.\n\nadelieData <- filter(penguins, species == \"Adelie\")\n\n\n\nRelational operators\nIn the filter example above, we used “==” as part of our condition argument. The double equals is an example of a relational operator - it’s a character (or multiple characters) that represents a logical action or process. Practically speaking, the double equals means “is this field equal to this value?”. If the answer is “TRUE”, then the row is included as part of the filtered data set.\nHere are some other relational operators:\n\n> (greater than)\n< (less than)\n<= (less than or equal to)\n>= (greater than or equal to)\n!= (not equal to)\n\nIn the filter function, relational operators are used to define a condition.\nYour turn. Create a variable called longFlipperData that is the subset of the penguin data with flipper length in mm greater than 22.\n\nlongFlipperData <- filter(penguins, flipper_length_mm > 22)\n\n\n\nLogical Operators\nThere may be cases in which we want to filter our dataset based on more than one condition. In these cases, we would use logical operators. Maybe we want to find all the penguins that are both female and weigh over 5000 g. Here are the main logical operators:\n\n& (and)\n| (or)\n\nIn the filter function, logical operators are used to join conditions together.\nHere’s an example of how to use a logical operator with the filter function:\n\nfemaleHeavyPenguins <- filter(penguins, sex == \"female\" & body_mass_g > 5000)\n\nYour turn. Create a variable called biscoeAndDreamSmall that contains all the penguins from either Biscoe OR Dream Island that are less than 3000 g.\n\nbiscoeAndDreamSmall <- filter(penguins, island == \"Biscoe\" | island == \"Dream\" & body_mass_g < 300)\n\n\n\nThe “Pipe”\nThe Tidyverse introduced a new convention to R called the “pipe”:\n%>%\nThe purpose of the pipe is to string functions and data together. You can think of it as sort of the glue that joins pieces of an assembly line together. Another way to think of it is to read it as “AND THEN”.\nBelow we can rewrite a command using the filter function with the pipe. After the assignment symbol (<-) we start with the data set, followed by the pipe, followed by the filter function. What’s different about the arguments in the filter function in this case?\n\nadelieData2 <-penguins %>% filter(species == \"Adelie\")\nadelieData2\n\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 142 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\nTry using the pipe in the code chunk below to create a data subset of penguins that are male and assign it to the variable malePenguins. Print it to the screen.\n\nmalePenguins <- penguins %>% filter(sex == \"male\")\n\nYou can also use the pipe for select (and many other functions as well). Instead of putting the data name inside of the function, you can put it before the pipe.\n\npenguinIslandMass2 <- penguins %>% select(island, body_mass_g)\n\nYour turn. Use the pipe syntax to assign the columns bill_length_mm and sex to a new variable with select.\n\nbillAndSex <- penguins %>% select(bill_length_mm, sex)\n\n\n\nRemoving NA values\nOur penguin data set contains NA values in some rows. Often, NA values create problems for calculating statistics and running models. There are many ways of doing this. One is to remove all rows with NAs in any column using the function na.omit.\n\nnoNAPenguins <- na.omit(penguins)\n\nYou can see that there are 333 rows (by the 333 observations in the Environment tab). We started with 344 rows in the original penguin set.\nGreat job!"
  },
  {
    "objectID": "Bootcamp/bootcamp_practice_1.html",
    "href": "Bootcamp/bootcamp_practice_1.html",
    "title": "",
    "section": "",
    "text": "You can save a blank version of this lesson to your computer to run the code chunks yourself by downloading the file below and opening it in your R studio. Come back and check your answers here!\n\n\n\n\n\n\n Download file"
  },
  {
    "objectID": "Bootcamp/bootcamp_practice_1.html#bootcamp-lesson-1",
    "href": "Bootcamp/bootcamp_practice_1.html#bootcamp-lesson-1",
    "title": "",
    "section": "Bootcamp Lesson 1",
    "text": "Bootcamp Lesson 1\n\nPractice with\n\nVariables\nFunctions\nPrinting to the screen\n\n\nAssign the number 500 to the variable numberButterflies\n\n\nnumberButterflies <- 500\n\n\nCalculate the cubed root of 26 and assign it to the variable y\n\n\ny <- 26^(1/3)\n\n\nPrint the variable y\n\n\ny\n\n[1] 2.962496"
  },
  {
    "objectID": "Bootcamp/bootcamp_practice_1.html#bootcamp-lesson-2",
    "href": "Bootcamp/bootcamp_practice_1.html#bootcamp-lesson-2",
    "title": "",
    "section": "Bootcamp Lesson 2",
    "text": "Bootcamp Lesson 2\n\nPractice with\n\nPackages\nAccessing specific columns in a data set\nAssigning variables\nSelect\nFiltering\n\n\n(Install if you haven’t completed lesson 2) and load the tidyverse and palmerpenguins packages.\n\n\ninstall.packages(\"tidyverse\", repos = \"http://cran.us.r-project.org\")\n\nInstalling package into '/Users/MilaUserAccount/Library/R/x86_64/4.2/library'\n(as 'lib' is unspecified)\n\n\n\nThe downloaded binary packages are in\n    /var/folders/8_/66ctd00n6b9839b2ghhk1gjw0000gp/T//RtmpuzD0ky/downloaded_packages\n\ninstall.packages(\"palmerpenguins\", repos = \"http://cran.us.r-project.org\")\n\nInstalling package into '/Users/MilaUserAccount/Library/R/x86_64/4.2/library'\n(as 'lib' is unspecified)\n\n\n\nThe downloaded binary packages are in\n    /var/folders/8_/66ctd00n6b9839b2ghhk1gjw0000gp/T//RtmpuzD0ky/downloaded_packages\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(\"palmerpenguins\")\n\n\nAssign the bill length column to a variable called penguinBillLength. Remember the data name is penguins.\n\n\npenguinBillLength <- penguins$bill_length_mm\n\n\nAssign the bill depth column to a variable called penguinBillDepth.\n\n\npenguinBillDepth <- penguins$bill_depth_mm\n\nFor Questions 4 - 7, you can choose to either use the pipe %>% or not. Either way is great!\n\nAssign only the columns island, bill_length_mm, and bill_depth_mm to a new variable (name it whatever you’d like!).\n\n\n# standard way\ndataSubset <- select(penguins, island, bill_length_mm, bill_depth_mm)\n\n# with the pipe\ndataSubset2 <- penguins %>% select(island, bill_length_mm, bill_depth_mm)\n\n\nAssign only the columns sex and year to the variable sexByYear.\n\n\n# standard way\nsexByYear <- select(penguins, sex, year)\n\n# with the pipe\nsexByYear2 <- penguins %>% select(sex, year)\n\n\nCreate a subset of the data that includes all the columns for only male Gentoo penguins with flipper lengths greater than 20 mm.\n\n\n# standard way\nlongMales <- filter(penguins, sex == \"male\", flipper_length_mm > 20)\n\n# with the pipe\nlongMales2 <- penguins %>% filter(sex == \"male\", flipper_length_mm > 20) \n\n\nCreate a subset of the data that includes all penguins on Biscoe island with flipper lengths greater than 20 mm. Remove all of the NA values as well.\n\n\nmyPenguins <- na.omit(filter(penguins, island == \"Biscoe\", flipper_length_mm > 20))\n\nChallenge: Using the pipe %>%, string together two commands with only one line of code to create a data set that includes only the columns: species, sex, and flipper length, with only Adelie penguins whose flippers are greater than 180 mm.\n\nlongAdelieSubset <- penguins %>% select(species, sex, flipper_length_mm) %>% filter(species == \"Adelie\", flipper_length_mm > 180)"
  },
  {
    "objectID": "Bootcamp/bootcamp_practice_1.html#bootcamp-lesson-3",
    "href": "Bootcamp/bootcamp_practice_1.html#bootcamp-lesson-3",
    "title": "",
    "section": "Bootcamp Lesson 3",
    "text": "Bootcamp Lesson 3\n\nPractice with\n\nPackages\nFiltering\nGgplot\n\n\n\nInstructions for plots\nEach plot should have axis labels, a title, and use colors to illustrate the data.\n\n(Install if you haven’t completed lessons 2 or 3 or practice 2) and load the tidyverse and palmerpenguins packages.\n\n\nlibrary(\"tidyverse\")\nlibrary(\"palmerpenguins\")\n\n\nCreate a subset of the data that includes all the data from the years 2007 and 2008.\n\n\nearlyYears <- penguins %>% filter(year < 2009)\n\n\nCreate a box plot of the bill lengths by male and female penguins of all species from the years 2007 and 2008.\n\n\nggplot(data = penguins, mapping = aes(x = sex, y = bill_length_mm, fill = sex)) +\n  geom_boxplot() +\n  labs(x = \"Penguin Sex\", y = \"Bill Length (mm)\", title = \"Male penguins tend to have longer bills\")\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\nCreate a subset of the data that includes only the female penguins.\n\n\nfemaleOnly <- penguins %>% filter(sex == \"female\")\n\n\nCreate a box plot of the bill depth by species of only the female penguins.\n\n\n# here I am using the pipe to put the data into the ggplot function, eliminating the need to say what data to use inside of the function. It's just another way of doing the same thing. \n\nfemaleOnly %>% ggplot(aes(x = species, y = bill_depth_mm, fill = species)) +\n  geom_boxplot() +\n  labs(x = \"Penguin Species\", y = \"Bill Depth (mm)\", title = \"Bill depth changes by species\")\n\n\n\n\n\nCreate a scatter plot of the relationship between bill length and bill depth for penguins on only Dream island and color by species.\n\n\npenguins %>% filter(island == \"Dream\") %>% \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  labs(x = \"Bill Length (mm)\", y = \"Bill Depth (mm)\", title = \"Is there a relationship between bill depth and bill length of penguins living on Torgersen Island?\")"
  },
  {
    "objectID": "Bootcamp/coding_basics_for_this_course.html",
    "href": "Bootcamp/coding_basics_for_this_course.html",
    "title": "",
    "section": "",
    "text": "While this course doesn’t have any specific prerequisites, it is important to have a basic understanding of coding in R and the tidyverse, a package ecosystem with great tools for data wrangling and visualization. Before attempting the lessons, you should be familiar with all of the content in this Coding Basics tab. There are three small lessons intended to get you familiar with the skills you will need to succeed in the remainder of the course.\n\n\n\nThere are three lessons, and three practices to gain more experience with what you will learn in the lessons. Each lesson is in its own file, but all of the practices are in one file.\n\n\n\nYou will need access to R studio. There are two ways of doing this.\n\nYou can create a free account on posit.cloud to access a version of R studio on the cloud.\nYou can download R and R studio to your local machine.\n\n\n\n\nEach lesson has a download this button at the top of the page, which will download the .R file to your machine. Upload this to either posit.cloud or open it in the R studio application. There are instructions for each learning objective within. When you are done, return to the page and view the solutions.\nAfter completing each lesson, take your skills even further with the practice file. This works the same way- download the .R file, and then come back to check your answers once complete. All of the practices are on one file.\n\n\n\n\n\n\nGain some familiarity with rstudio\nLearn how to run R code in “code chunks”\nPerform some arithmetic with R\nCreate variables in R, and assign values to them\nFunctions\n\n\n\n\n\nInstalling and loading a package\nOpening and looking at a data set\nAccessing a specific column in a data set\nSelecting columns to create a new variable\nRelational operators\nFiltering\nThe pipe %>%\n\n\n\n\n\nLoad and filter data sets as needed\nLearn the basic elements of ggplot"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Class Schedule",
    "section": "",
    "text": "Week\nTopic\nReading\nLesson\nAssignment\n\n\n\n\n1\nAccounts creation\n\n\n\n\n\n2\nEndangered Species Act\n\n\n\n\n\n3\nGitHub, R, R studio\n\n\n\n\n\n4\nGBIF - data wrangling, viz\n\n\n\n\n\n5\nFocal species - data wrangling, viz\n\n\n\n\n\n6\nCurrent SDM\n\n\n\n\n\n7\nFuture SDM\n\n\n\n\n\n8\nFocal species SDM\n\n\n\n\n\n9\nFocal species presentation + repo\n\n\n\n\n\n10\nPresentation\n\n\n\n\n\n11\nGroup work re stakeholder feedback\n\n\n\n\n\n12\nGroup work re stakeholder feedback\n\n\n\n\n\n13\nGroup work for final presentations\n\n\n\n\n\n14\nStakeholder visit\n\n\n\n\n\n15\nReflection and evaluation"
  }
]